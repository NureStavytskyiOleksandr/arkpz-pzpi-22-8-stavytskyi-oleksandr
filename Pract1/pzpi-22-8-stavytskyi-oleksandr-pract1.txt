МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З Практичної роботи № 1
з дисципліни
«Аналіз та рефакторинг коду»



Виконав
ст. гр. ПЗПІ-22-8
Ставицький Олександр
Перевірив
ст. викладач каф. ПІ
Сокорчук І. П.




Харків 2023
1.1 Мета: дослідити рекомендації щодо написання коду для обраної мови програмування.
1.2 Тема: основні рекомендації написання коду для мови програмування Ruby.
1.3 Рекомендації щодо написання коду.
1.3.1 Іменування змінних, методів, класів та модулів.
Для змінних та методів слід використовувати snake_case.
	Поганий приклад:
UserName = "John Doe"
def SendWelcomeEmail()
  # Логіка надсилання листа
end
	Гарний приклад:
user_name = "John Doe"
def send_welcome_email
  # Логіка надсилання листа
end
А для іменування класів і модулів треба використовувати CamelCase.
     Поганий приклад:
class userregistration
  # Логіка класу реєстрації користувача
end	
     Гарний приклад:
class UserRegistration
  # Логіка класу реєстрації користувача
end

1.3.2 Відступи та форматування.
Для відступів треба використовувати 2 пробіли замість використання табуляцій.
     Поганий приклад:
     def register_user(user_name, email)
       	# Логіка методу
       	User.new(user_name, email)
     end
     Гарний приклад:
     def register_user(user_name, email)
       # Логіка методу
       User.new(user_name, email)
     end
     
1.3.3 Інтерполяція рядків.
Рекомендації використання інтерполяції замість конкатенації.
	Поганий приклад:
greeting = "Hello, " + user_name + "!"
	Гарний приклад:
greeting = "Hello, #{user_name}!"

1.3.4 Коментарі.
Коментарі пояснюють навіщо робиться та чи інша дія. Але занадто багато коментарів не потрібно, вони будуть зайвими.
	Поганий приклад:
# Змінна для імені користувача
user_name = "John"
	Гарний приклад:
# Метод надсилає привітальний лист новому користувачу
def send_welcome_email(user)
  # Логіка для надсилання листа
end

1.3.5 Don’t repeat yourself.
Треба уникати дублювання коду, та використовувати замість цього методи.
	Поганий приклад:
user1 = User.new("John", "john@example.com")
user2 = User.new("Jane", "jane@example.com")
	Гарний приклад:
def create_user(name, email)
  User.new(name, email)
end

1.3.6 Уникання явних return.
В Ruby не обов'язково явно використовувати return для повернення значення з методу. Останній обчислений вираз автоматично стає значенням, що повертається методом. Це зменшує кількість коду та робить його більш лаконічним.
	Поганий приклад:
def user_registered?
  return user.active
end
	Гарний приклад:
def user_registered?
  user.active
end



1.3.7 Обробка помилок.
Треба ловити конкретні помилки, які можуть виникнути замість того, щоб ловити всі помилки без розбору.
	Поганий приклад:
begin
  user.save!
rescue
  puts "An error occurred"
end
	Гарний приклад:
begin
  user.save!
rescue ActiveRecord::RecordInvalid => e
  puts "Error: #{e.message}"
end

1.4 Висновки: під час виконання практичного завдання булу досліджені рекомендації та особливості написання коду на мові програмування Ruby.
Посилання на відео: https://youtu.be/EkvhvvBaY7M

1.5 Список використаних джерел:
1. https://www.ruby-lang.org 
2. https://uk.wikipedia.org/wiki/Ruby 


Додаток А

Рис. А.1 – титульний слайд


Рис. А.2 – про Ruby

Рис. А.3 – правила найменування


Рис. А.4 – відступи на форматування



Рис. А.5 – інтерполяція рядків


Рис. А.6 – коментарі


Рис. А.7 – don`t repeat yourself


Рис. А.8 – уникання явних return


Рис. А.9 – обробка помилок


Рис. А.10 – використані джерела
