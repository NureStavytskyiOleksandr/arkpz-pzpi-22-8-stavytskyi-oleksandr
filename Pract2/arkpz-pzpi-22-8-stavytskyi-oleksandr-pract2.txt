МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З Практичної роботи № 2
з дисципліни
«Аналіз та рефакторинг коду»



Виконав
ст. гр. ПЗПІ-22-8
Ставицький Олександр
Перевірив
ст. викладач каф. ПІ
Сокорчук І. П.



Харків 2024
2.1 Тема: Методи рефакторингу коду програмного забезпечення.

2.2 Мета: Навчитися основним методам рефакторингу коду на основі реальних прикладів своїх власних програмних проєктів, ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для погращення його якості.

2.3 Обрані методи рефакторингу: Remove Middle Man, Replace Magic Number with Symbolic Constant, Consolidate Duplicate Conditional Fragments.

2.3.1 Remove Middle Man. Метод полягає в тому, щоб позбутися проміжного об'єкта, який лише передає виклики до іншого об'єкта, і викликати методи безпосередньо у відповідного об'єкта. До рефакторингу наш код виглядає так:

1 public class OrderManager
2 {
3     private readonly PaymentService _paymentService;
4 
5     public OrderManager()
6     {
7         _paymentService = new PaymentService();
8     }
9     public bool ProcessPayment(Order order)
10    {
11        return _paymentService.ProcessPaymentForOrder(order);
12    }
13 }
14 public class PaymentService
15 {
16     public bool ProcessPaymentForOrder(Order order)
17     {
18        if(order.Amount > 0)
19         {
20             return true;
21         }
22         return false;
23     }
24 }

Після використання методу рефакторингу Remove Middle Man отримуємо:

1 public class Order
2 {
3     private readonly PaymentService _paymentService;
4     public Order()
5     {
6         _paymentService = new PaymentService();
7     }
8     public bool ProcessPayment(Order order)
9     {
10        if (Amount > 0)
11        {
12            return _paymentService.ProcessPayment(this);
13        }
14        return false;
15    }
16 }
17 public class PaymentService
18 {
19     public bool ProcessPayment(Order order)
20     {
21        return order.Amount > 0;
22     }
23 }

2.3.2 Replace Magic Number with Symbolic Constant. Метод полягає в тому, щоб замінити "магічні числа" на символічні константи, що покращує зрозумілість та керованість коду. До рефакторингу наш код виглядає так:

1 public class Order
2 {
3     public decimal CalcukateTotal(OrderItem[] items)
4     {
5         decimal total = 0;
6         foreach(var item in items)
7         {
8             total += item.Price * item.Quantity;
9         }
10         return total + 5.99m;
11    }
12 }

Після використання методу рефакторингу Replace Magic Number with Symbolic Constant отримуємо:

1 public class Order
2 {
3     private const decimal ShippingCost = 5.99m;
4     public decimal CalcukateTotal(OrderItem[] items)
5     {
6         decimal total = 0;
7         foreach(var item in items)
8         {
9             total += item.Price * item.Quantity;
10        }
11        return total + ShippingCost;
12     }
13 }

2.3.3 Consolidate Duplicate Conditional Fragments. Метод полягає в тому, щоб об'єднати однакові фрагменти коду в умовах, щоб уникнути дублювання. До рефакторингу наш код виглядає так:

1 public class OrderService
2 {
3     public string ProcessOrder(OrderedParallelQuery order)
4     {
5         if(order.Status == OrderStatus.New)
6         {
7             return "New order processed";
8         }
9         else if (order.Status == OrderStatus.Processing)
10        {
11            return "Order being processed";
12        }
13        else if (order.Status == OrderStatus.Completed)
14        {
15            return "Order completed";
16        }
17        return "Invalid order status";
18    }
20 }

Після використання методу рефакторингу Consolidate Duplicate Conditional Fragments отримуємо:

1 public class OrderService
2 {
3     public string ProcessOrder(OrderedParallelQuery order)
4     {
5         switch (order.Status)
6         {
7             case OrderStatus.New:
8             case OrderStatus.Processing:
9             case OrderStatus.Completed:
10                 return $"{order.Status} order processed";
11            default:
12                 return "Invalid order status";
13        }
14    }
15 }

1.4 Висновки: я навчився основним методам рефакторингу коду на основі реальних прикладів своїх власних програмних проєктів, ідентифікував проблеми в коді та використовував відповідні методи рефакторингу для погращення якості коду.
Посилання на відео: https://youtu.be/Da98vKd9m8o 

1.5 Список використаних джерел:
1. Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. 
2. Martin Fowler. Refactoring. Improving the Design of Existing Code– Addison-Wesley Professional, 1999.


Додаток А

Рис. А1 – титул


Рис. А2 – методи рефакторингу


Рис. А3 – до Remove Middle Man

Рис. А4 - після Remove Middle Man


Рис. А5 – до Replace Magic Number with Symbolic Constant


Рис. А6 – після Replace Magic Number with Symbolic Constant


Рис. А7 – до Consolidate Duplicate Conditional Fragments


Рис. А8 – пілся Consolidate Duplicate Conditional Fragments


Рис. А9 – використані джереда


Рис. А10 – дякую за увагу


4

